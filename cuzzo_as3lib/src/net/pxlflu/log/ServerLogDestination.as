package com.atmospherebbdo.log {	import com.atmospherebbdo.log.ILogDestination;	import com.atmospherebbdo.log.LogLevel;	import com.atmospherebbdo.log.LogMessage;		import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;		/**	 * @author markhawley	 * 	 * Logs messages to a file on a server.	 */	public class ServerLogDestination implements ILogDestination 	{		private var minimumLevel:LogLevel;		private var logFile:String;		private var logScript:String;		private var proxyScript:String;				/**		 * Constructor.		 * 		 * @param	minimumLogLevel (defaults to ERROR)		 * @param	logFile (defaults to 'general-error.log' on the usual machine)		 * @param	logScript (defaults to the usual appending logger)		 * @param	proxyScript (defaults to proxy.php in the current directory)		 */		public function ServerLogDestination( minimumLogLevel:LogLevel=null, 			logFile:String="general-error.log", 			logScript:String="http://72.3.133.92/scripts/log/appendingLogger.php",			proxyScript:String="proxy.php" )		{			if (minimumLogLevel == null)			{				minimumLogLevel = LogLevel.ERROR;			}			this.minimumLevel = minimumLogLevel;			this.logFile = logFile;			this.logScript = logScript;			this.proxyScript = proxyScript;			}		/**		 * Logs a log message.		 * 		 * @param	message	LogMessage to log.		 */		public function log(message:LogMessage):void		{			if (message.level < minimumLevel)			{				return;			}						var url:String = proxyScript;			var request:URLRequest = new URLRequest(url);						var requestVars:URLVariables = new URLVariables();			requestVars.message = message.toString();			requestVars.logFile = logFile;			requestVars.proxiedScript = logScript;			request.data = requestVars;			request.method = URLRequestMethod.POST;						var urlLoader:URLLoader = new URLLoader();			urlLoader = new URLLoader();			urlLoader.dataFormat = URLLoaderDataFormat.VARIABLES;			urlLoader.load(request);		}	}}