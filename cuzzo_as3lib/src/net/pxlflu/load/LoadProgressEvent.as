package com.atmospherebbdo.load {	import flash.events.Event;	import flash.events.ProgressEvent;import com.atmospherebbdo.dbc.precondition;		/**	 * @author markhawley	 * 	 * Progress event for ILoaders.	 */	public class LoadProgressEvent extends ProgressEvent 	{		/**		 * Load on the way...		 */		public static const PROGRESS:String = "progress";		/**		 * Load complete.		 */		public static const COMPLETE:String = "complete";		public var bytesTotalCurrent:int;		public var itemsLoaded:int;		public var itemsTotal:int;		public var name:String;		private var _ratioLoaded:Number;		private var _percentLoaded:Number;		private var _weightPercent:Number;				/**		 * Constructor.		 * 		 * @param	name	String		 * @param	bubbles	Boolean (optional) defaults to true		 * @param	cancelable	Boolean (optional) defaults to false		 */		public function LoadProgressEvent( name:String, bubbles:Boolean = true, cancelable:Boolean = false )		{			super(name, bubbles, cancelable);					this.name = name;		}		/**		 * Populates the event with data.		 * 		 * @param	bytesLoaded	int		 * @param	bytesTotal	int		 * @param	bytesTotalCurrent	int		 * @param	itemsLoaded	int		 * @param	itemsTotal	int		 * @param	weightPercent	Number		 */		public function setInfo(                    bytesLoaded:int,                    bytesTotal:int,                    bytesTotalCurrent:int,                     itemsLoaded:int,                    itemsTotal:int,                    weightPercent:Number                    ):void		{			this.bytesLoaded = bytesLoaded;			this.bytesTotal = bytesTotal;			this.bytesTotalCurrent = bytesTotalCurrent;			this.itemsLoaded = itemsLoaded;			this.itemsTotal = itemsTotal;			this.weightPercent = weightPercent;			this.percentLoaded = bytesTotal > 0 ? (bytesLoaded / bytesTotal) : 0;			ratioLoaded = itemsTotal == 0 ? 0 : itemsLoaded / itemsTotal;		}		/** 		 * Returns an identical copy of this object		 * 		 * @return A cloned instance of this object.		 */		override public function clone():Event 		{			var l:LoadProgressEvent = new LoadProgressEvent(name, bubbles, cancelable);			l.setInfo(bytesLoaded, bytesTotal, bytesTotalCurrent, itemsLoaded, itemsTotal, weightPercent);			return l;			}		/** 		 * Returns a number between 0 - 1 that indicates progress regarding 		 * weights 		 * 		 * @return Number		 */		public function get weightPercent():Number 		{ 			return _weightPercent; 		}		/**		 * Sets the percent of the load that is complete.		 * 		 * @param	value	Number		 */		public function set weightPercent(value:Number):void 		{ 			if (isNaN(value) || !isFinite(value)) 			{				value = 0;					}			precondition( value >= 0 && value <= 1 );			_weightPercent = value; 		}		/** 		 * A number between 0 - 1 that indicates progress regarding bytes		 * 		 * @return	Number		 */		public function get percentLoaded():Number 		{ 			return _percentLoaded; 		}		/**		 * Mutator for the precent loaded.		 * 		 * @param value	Number		 */		public function set percentLoaded(value:Number):void 		{			if (isNaN(value) || !isFinite(value)) 			{				value = 0;			}			precondition(value >= 0 && value <= 1);					 			_percentLoaded = value; 		}		/**  		 *	The ratio (0-1) loaded (number of items loaded / number of items total)		 *			 *	@return	Number, 0-1		 */		public function get ratioLoaded():Number 		{ 			return _ratioLoaded; 		}		public function set ratioLoaded(value:Number):void 		{ 			if (isNaN(value) || !isFinite(value)) 			{				value = 0;				}			precondition( value >= 0 && value <= 1);						_ratioLoaded = value; 		}	}}