package com.atmospherebbdo.functional {	import com.atmospherebbdo.assertions.checkArgument;	import com.atmospherebbdo.assertions.fail;							/**	 * Standard reduce function. Reduce takes an array, a function or method 	 * taking two arguments, and an optional starting value. It then applies	 * the function given, taking the return value of the previous call as one 	 * argument and the next element of the array supplied as the second	 * argument. It returns the final result. For examples of this function in	 * use, see the associated test cases in the tests directory.	 * 	 * @param	thisObj	Object to use as this in function (optional)	 * @param	func	Function, takes two arguments	 * @param	list	Array, of arguments to be applied to func	 * @param	initial	Object (optional). The default return value, and used as	 * 					the first argument to func if supplied.	 * 						 * @return 	Object, the final result of func calls	 */	public function reduce( funcOrThisObj:Object, funcOrArray:Object, 		arrayOrInitial:*=null, init:*=null ):Object	{		var thisObj:Object;		var func:Function;		var list:Array;		var initial:Object;				checkArgument( 			(funcOrThisObj is Function && funcOrArray is Array) ||			(funcOrThisObj is Function && funcOrArray === null) ||			(funcOrThisObj is Object && funcOrArray is Function && arrayOrInitial is Array ),			"Bad arguments passed to reduce().");				if ( funcOrThisObj is Function )		{			thisObj = null;			func = funcOrThisObj as Function;			list = funcOrArray as Array;			initial = arrayOrInitial;		}		else if (funcOrArray is Function)		{			thisObj = funcOrThisObj;			func = funcOrArray as Function;			list = arrayOrInitial as Array;			initial = init;		}		else		{			fail("Bad assertion in reduce: missed bad arguments.");		}				if (list == null)		{			// abandon ship if no list was sent			return initial;		}				var allParameters:Object = list.slice();		if (initial != null)		{			allParameters.unshift(initial);		}		else		{			// ignore it		}				var result:* = allParameters.shift();				while( allParameters.length > 0 )		{			result = func.apply(thisObj, [result, allParameters.shift()]);		}		return result;	}}