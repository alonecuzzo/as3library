package com.atmospherebbdo.util {	import com.atmospherebbdo.dbc.precondition;		import flash.display.DisplayObject;	import flash.display.LoaderInfo;	
	/**	 * @author markhawley	 * 	 * Reads flash vars and allows setting of defaults. Singleton. (One of the	 * few things I can think of that really, really *should* be a singleton.)	 */	public dynamic class FlashVars 	{		private static const ARRAY_DELIMITER:String = "|";				private static var instance:FlashVars;		private static var allowInstantiation:Boolean = false;				/**		 * Accessor.		 * 		 * @param	displayObj	DisplayObject, must be on the display list.		 * @param	defaults Object		 * 		 * @return	FlashVars		 */		public static function getFlashVars( displayObj:DisplayObject=null, defaults:Object=null) :FlashVars		{			if (instance == null)			{				precondition(displayObj != null, "First call to " +					"getFlashVars() must supply a display object on the " +					"display list.");								allowInstantiation = true;				instance = new FlashVars( displayObj, defaults );				allowInstantiation = false;			}			else			{				instance.refreshDefaults( defaults );			}			return instance;		}				/**		 * Constructor.		 * 		 * @param	displayObj	DisplayObject, must be on the display list.		 * @param	defaults	Object, a hash of name/value pairs of		 * 						default flash var values.		 */		public function FlashVars( displayObj:DisplayObject, defaults:Object=null )		{			precondition( allowInstantiation, "This is a singleton." );						refreshDefaults(defaults);						// set 'real' flash vars			if (displayObj.root != null)			{				var actualFlashVars:Object = LoaderInfo( displayObj.root.loaderInfo ).parameters;				for (var aKey:String in actualFlashVars)				{					this[aKey] = actualFlashVars[aKey].split(ARRAY_DELIMITER);				}			}		}				/**		 * Sets defaults, not overwriting previously set values.		 * 		 * @param	defaults	Object, name/value pairs		 */		private function refreshDefaults( defaults:Object=null ) :void		{			// set defaults			if (defaults != null)			{				for (var dKey:String in defaults)				{					// don't overwrite anything					if (this[dKey] == null)					{						this[dKey] = defaults[dKey].split(ARRAY_DELIMITER);					}				}			}		}				/**		 * Provides simple string dump.		 * 		 * @param	String		 */		public function toString() :String		{			var s:String = "[FlashVars { ";			for (var k:String in this)			{				s += k + ":" + this[k] + " ";			}			return s + " }]";		}	}}