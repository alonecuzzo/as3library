package com.atmospherebbdo.collections {	import com.atmospherebbdo.dbc.precondition;	import com.atmospherebbdo.errors.NoSuchElementError;				/**	 * @author markhawley	 * 	 * List Iterator that proceeds 0,1,2...n,0,1,2...n...	 */	public class ListArrayLoopingIterator extends ArrayLoopingIterator implements IListIterator 	{			/**		 * Constructor.		 * 		 * @param	collection	IList		 * @param	implementation	Array		 */		public function ListArrayLoopingIterator( collection:AbstractCollection, implementation:Array )		{			precondition( collection is IList );						super( collection, implementation );		}				/**		 * Returns true as long as the collection contains anything.		 * Looping iterators always have something to return otherwise.		 * 		 * @return	Boolean		 */		public function hasPrevious():Boolean		{			precondition(!invalid, "Invalid iteration over a changed collection.");						if (collection.isEmpty())			{				return false;			}			else			{				return true;			}		}				/**		 * Returns the index at which the next call to next() will		 * pull from.		 * 		 * @return int		 */		public function nextIndex():int		{			precondition(!invalid, "Invalid iteration over a changed collection.");						var t:int = index + 1;			if (impl.length == t)			{				t = 0;			}			return t;		}				/**		 * Returns the previous element of the collection.		 * 		 * @return *		 */		public function previous():*		{			precondition(!invalid, "Invalid iteration over a changed collection.");						if (!hasPrevious())			{				throw new NoSuchElementError();			}						index--;			if (0 == index)			{				index = impl.length - 1;			}			return index;		}				/**		 * Returns the index at which the next call to previous() 		 * will pull from.		 * 		 * @return int		 */		public function previousIndex():int		{			precondition(!invalid, "Invalid iteration over a changed collection.");						var t:int = index - 1;			if (0 == t)			{				t = impl.length - 1;			}			return t;		}	}}