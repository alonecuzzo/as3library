package com.atmospherebbdo.collections {	import com.atmospherebbdo.dbc.precondition;	import com.atmospherebbdo.errors.NoSuchElementError;				/**	 * @author markhawley	 * 	 * List Iterator that proceeds randomly.	 */	public class ListArrayRandomIterator extends ArrayRandomIterator implements IListIterator 	{			private var _nextIndex:int = -1;		private var _previousIndex:int = -1;				/**		 * Constructor.		 * 		 * @param	collection	IList		 * @param	implementation	Array		 */		public function ListArrayRandomIterator( collection:AbstractCollection, implementation:Array )		{			precondition( collection is IList );						super( collection, implementation );		}				public function hasPrevious():Boolean		{			if (collection.isEmpty())			{				return false;			}			else			{				return true;			}		}				public function nextIndex():int		{			var t:int = getRandomIndex();			_nextIndex = t;			return t;		}				public function previous():*		{			if (!hasPrevious())			{				throw new NoSuchElementError();			}						if (_previousIndex != -1)			{				index = _previousIndex;			}			else			{				index = getRandomIndex();			}			_previousIndex = -1;						return impl[index];			}				public function previousIndex():int		{			var t:int = getRandomIndex();			_previousIndex = t;			return t;		}				/**		 * Returns a random element in the collection.		 * 		 * @return	*		 */		override public function next():*		{			if (_nextIndex != -1)			{				index = _nextIndex;			}			else			{				index = getRandomIndex();			}			_nextIndex = -1;						return impl[index];			}				/**		 * Does nothing at all.		 */		override public function reset():void		{			_previousIndex = -1;			_nextIndex = -1;		}	}}