package com.atmospherebbdo.util.number {	import com.atmospherebbdo.util.Range;	import com.atmospherebbdo.util.string.sprintf;			/**	 * @author markhawley	 * 	 * Handles rolling averages.	 */	public class RollingAverage 	{		private var list:Array = [];		private var count:Number = 10;				/**		 * Constructor.		 * 		 * @param	count	Number, the number of past and current values to		 * 					recall when calculating this rolling average.		 * 					Optional, defaulting to 10.		 * @param	startValue	Number, if provided, the rolling average is pre-		 * 						populated so that it behaves as though the average		 * 						was already updated count times with this value.		 */		public function RollingAverage( count:Number = 10, startValue:Number = NaN )		{			this.count = count;						if (!isNaN(startValue))			{				new Range(0, this.count).each(function (item:Number) :void				{					list.push( startValue );				});			}		}				/**		 * Enters the latest value into the rolling average and returns the		 * current value of the rolling average.		 * 		 * @param	latestValue	Number, optional. A value to add to the rolling		 * 						average.		 * 								 * @return	Number, the current value of the rolling average.		 */		public function update( latestValue:Number=NaN ) :Number		{			if (!isNaN(latestValue))			{				if (list.length >= count)				{					list.shift();						}				list.push( latestValue );			}			var length:uint = list.length;						if (length != 0)			{				var total:Number = 0;				for (var i:uint=0; i < list.length; i++)				{					total += list[i];				}				return total / list.length;			}			else			{				return 0;			}		}				/**		 * Returns a string dump for debugging.		 * 		 * @return String		 */		public function toString() :String		{			return sprintf("[RollingAverage of [%s]: %s]", list, update());			}				/**		 * Returns the current value of the rolling average.		 * 		 * @return Object (Number)		 */		public function valueOf() :Object		{			return update();		}	}}