package com.atmospherebbdo.log{	import flash.utils.Dictionary;	
	import flash.utils.describeType;		/**	 * Static class for creation of and access to Logs.	 * 	 * @author hawleym	 */	public class LogFactory 	{		private static var logs:Dictionary = new Dictionary(true);				internal static var destinations:Array = [];			public function LogFactory()		{			throw new Error("LogFactory is a static class.");		}				/**		 * Log accessor.		 * 		 * @param	logID		Object, the ID of a Log instance. If		 * 						the name has been encountered before, that		 * 						Log instance is returned. Otherwise, a new		 * 						Log with that name is created and returned.		 * 						(optional, deaults to the empty string.		 * @param	logLevel	LogLevel, the default logging level of the Log		 * 						(optional, defaults to TRACE)		 * @param   ...rest		an optional list of ILogDestinations to use		 * 						for this particular log only, instead of		 * 						those set for the LogFactory as a whole.		 */		public static function getLog( logID:Object=null, logLevel:LogLevel=null, ...rest ):Log		{				var logName:String;						logID = (logID == null ? "" : logID);						if (logID is String)			{				logName = logID.toString();			}			else			{				var d:XML = describeType(logID);				logName = d.@name.toString();			}						if (logLevel == null)			{				logLevel = LogLevel.TRACE;			}						var log:Log = logs[ logName ];						// make a new Log if we never saw this name before			if (log == null)			{				log = new Log( logName, logLevel );				logs[ logName ] = log;			}						if (rest.length > 0)			{				log.setDestinations.apply( log, rest );			}						return log;		}				public static function setDestinations( ...rest ) :void		{			destinations = rest;		}	}}