package com.atmospherebbdo.animation {	import com.atmospherebbdo.dbc.precondition;	import com.atmospherebbdo.util.IDestroyable;		import flash.display.Shape;		/**	 * @author markhawley	 * 	 * Shape subclass with animations added.	 */	public class AnimatableShape extends Shape implements IAnimatable, IDestroyable	{		private var animator:Animator;				private var _isDestroyed:Boolean = false;				/**		 * Constructor.		 * 		 * @param	animationPackage	IAnimationPackage, optional.		 * 								Defaults to Animator.defaultAnimationPackage.		 */		public function AnimatableShape( animationPackage:IAnimationPackage=null )		{			animator = new Animator( this, animationPackage );		}				/**		 * Allows proper garbage collection of the Shape.		 */		public function destroy() :void		{			animator.destroy();			animator = null;						_isDestroyed = true;		}				/**		 * Animates the Shape's properties to new values.		 * 		 * @param	duration	Number in seconds that animation		 * 						should take.		 * @param	td			Object, name/value pairs that		 * 						should animate. See the specific		 * 						animation package used for other details.		 * 								 * @return IAnimation		 */		public function to( duration:Number, td:* ):IAnimation		{			precondition(!isDestroyed());						return animator.to( duration, td );		}				/**		 * Animates the Shape's property values from a given set		 * of values to the current ones.		 * 		 * @param	duration	Number in seconds that animation		 * 						should take.		 * @param	td			Object, name/value pairs that		 * 						should animate. See the specific		 * 						animation package used for other details.		 * 								 * @return IAnimation		 */		public function from( duration:Number, td:* ):IAnimation		{			precondition(!isDestroyed());						return animator.from( duration, td);		}				public function isDestroyed():Boolean		{			return _isDestroyed;		}	}}