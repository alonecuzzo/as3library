package com.atmospherebbdo.collections {	import com.atmospherebbdo.dbc.precondition;	import com.atmospherebbdo.errors.AbstractMethodCallError;	import com.atmospherebbdo.util.instantiatedAs;		import flash.events.IEventDispatcher;	import flash.utils.Dictionary;import com.atmospherebbdo.dbc.postcondition;		/**	 * @author markhawley	 * 	 * Defines methods of a basic array-based collection. Not to	 * be directly instantiated.	 */	internal class AbstractDictionaryCollection extends AbstractCollection implements ICollection, IEventDispatcher	{		// internal for iterator access		internal var impl:Dictionary;		protected var keyType:Class;				/**		 * Constructor.		 * 		 * @throws AbstractMethodCallError if directly instantiated.		 */		public function AbstractDictionaryCollection( array:Array=null, kType:Class=null, valueType:Class=null)		{			keyType = kType;						impl = new Dictionary(false);						super( array, valueType );						if (instantiatedAs(this, AbstractDictionaryCollection))			{				throw new AbstractMethodCallError("Cannot " +					"instantiate Abstract class.");			}						postcondition(impl != null);		}				/**		 * Returns true if the collection is empty.		 * 		 * @return Boolean		 */		override public function isEmpty():Boolean		{			precondition(impl != null, "Implementation must exist.");						return size() == 0;		}				/**		 * Returns a list of all keys in the implementation dictionary.		 * 		 * @return Array of keys		 */		protected function getImplKeys() :Array		{			precondition(impl != null, "Implementation must exist.");						var keys:Array = [];			for (var key:* in impl)			{				keys.push(key);			}			return keys;		}				/**		 * Returns a list of all values in the implementation dictionary.		 * 		 * @return	Array of values		 */		protected function getImplValues() :Array		{			precondition(impl != null, "Implementation must exist.");						var values:Array = [];			for (var key:* in impl)			{						values.push(impl[key]);			}			return values;		}	}}