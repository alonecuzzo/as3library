package com.atmospherebbdo.collections {	import com.atmospherebbdo.collections.events.CollectionEvent;	import com.atmospherebbdo.dbc.precondition;	import com.atmospherebbdo.errors.AbstractMethodCallError;	import com.atmospherebbdo.util.instantiatedAs;			/**	 * @author markhawley	 */	internal class AbstractIterator 	{		protected var collection:AbstractCollection;		protected var invalid:Boolean = false;				/**		 * Constructor.		 * 		 * @param	collection	ICollection		 * 		 * @throws	AbstractMethodCallError		 */		public function AbstractIterator( collection:AbstractCollection )		{			precondition(collection != null);						if (instantiatedAs(this, AbstractIterator))			{				throw new AbstractMethodCallError("Cannot " +					"instantiate Abstract class.");			}						this.collection = collection;						collection.addEventListener(CollectionEvent.CHANGED, onCollectionChange, false, 0, true);		}				/**		 * Abstract method that marks iterators as invalid if the collection		 * with which they are associated undergoes a change they don't play		 * well with.		 * 		 * @param	event	CollectionEvent		 */		protected function onCollectionChange( event:CollectionEvent ) :void		{			throw new AbstractMethodCallError();		}	}}