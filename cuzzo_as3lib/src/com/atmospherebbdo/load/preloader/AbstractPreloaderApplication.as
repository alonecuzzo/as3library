package com.atmospherebbdo.load.preloader{	import com.atmospherebbdo.application.Application;	import com.atmospherebbdo.assertions.assert;	import com.atmospherebbdo.errors.AbstractMethodCallError;	import com.atmospherebbdo.load.ILoader;	import com.atmospherebbdo.load.LoadItemData;	import com.atmospherebbdo.load.LoadProgressEvent;	import com.atmospherebbdo.load.MultiLoader;	import com.atmospherebbdo.util.FlashVars;	import com.atmospherebbdo.util.contextmenu.versionStamp;	import com.atmospherebbdo.util.instantiatedAs;		import flash.display.Sprite;	import flash.display.Stage;	import flash.errors.IOError;	import flash.events.ErrorEvent;		/**	 * Minimal aping of the Application class, used for preloading.	 * 	 * @author mark hawley	 */	public class AbstractPreloaderApplication extends Sprite	{			private var flashVars:FlashVars;		private var appLoader:ILoader;		private var progressIndicator:AbstractProgressIndicator;				private var mainAppLoadItemData:LoadItemData;		protected var mainApp:Application;				/**		 * Constructor.		 */		public function AbstractPreloaderApplication()		{			if (instantiatedAs(this, AbstractPreloaderApplication))			{				throw new AbstractMethodCallError("Cannot " +					"instantiate Abstract class.");			}						assert(stage != null, "This must be a document class.");						flashVars = FlashVars.getFlashVars( this, new PreloaderFlashVarsDefaults());						if (!flashVars.mainSWF)			{				throw new Error("Cannot run preloader without providing a mainSWF flash var.");				}						// place the build version/date into the right-click menu			versionStamp( this );						run();		}				protected function createProgressIndicator():AbstractProgressIndicator		{			throw new AbstractMethodCallError();			return null;		}				protected function doLayout() :void		{			progressIndicator.y = stage.stageHeight;			progressIndicator.x = (stage.stageWidth - progressIndicator.width) / 2;		}				protected function startPreloadedApplication() :void		{			throw new AbstractMethodCallError();		}		/**		 * Centralized event listening.		 */		private function addAppLoaderListeners() :void		{			appLoader.addEventListener( LoadProgressEvent.PROGRESS, onLoadProgress );			appLoader.addEventListener( LoadProgressEvent.COMPLETE, onLoadComplete );			appLoader.addEventListener( ErrorEvent.ERROR, onLoadError );		}				private function onLoadComplete( event:LoadProgressEvent ) :void		{			removeAppLoaderListeners();						removeChild(progressIndicator);			progressIndicator = null;						mainApp = appLoader.getMovieClip(mainAppLoadItemData) as Application;						startPreloadedApplication();		}				private function onLoadError( event:ErrorEvent ) :void		{			throw new IOError("Couldn't load file. " + event);		}				/**		 * Updates the progress bar. 		 */		private function onLoadProgress( event:LoadProgressEvent ) :void		{			var ratio:Number = event.bytesLoaded/event.bytesTotal;			if (event.bytesTotal == 0 || isNaN(event.bytesTotal))			{				ratio = 0;			}			progressIndicator.setProgress( ratio * 100, 100);		}				/**		 * Adds all files required to load to the bulk loader.		 */		private function populateAppLoader() :void		{			mainAppLoadItemData = new LoadItemData( flashVars.mainSWF );			appLoader.add(mainAppLoadItemData);			for each (var url:String in flashVars.assets) 			{				appLoader.add(new LoadItemData( url ));				}		}				/**		 * Centralized event un-listening.		 */		private function removeAppLoaderListeners() :void		{			appLoader.removeEventListener( LoadProgressEvent.PROGRESS, onLoadProgress );			appLoader.removeEventListener( LoadProgressEvent.COMPLETE, onLoadComplete );			appLoader.removeEventListener( ErrorEvent.ERROR, onLoadError );		}		/**		 * Starts the application.		 */		private function run() :void		{			appLoader = new MultiLoader();			addAppLoaderListeners();			populateAppLoader();						progressIndicator = createProgressIndicator();			addChild(progressIndicator);						doLayout();						appLoader.start();		}	}}